# Objective

- enable offline instalation of packages
- keep old version of arch packages
- sync metadata via ssb
- allow peer-to-peer installation
- enable reproducable rootfs builds

# Surprises

- arch=any packages like "archlinux-keyring" are in all of the sync databases for each architecture. However, they actaully have different SHA256SUM entries in the sync db, even though all other properties seem to be the same. So, we can not de-dupe based on SHA (or blobid)

# TODO
- bindings vor vercmp instead of spawning the binary
- resolve package version based on version spec (eg. '>=x.y.z-1') and provisions (eg. 'sh' = "need some shell")
- mimic a local mirror server that pacman can use
  - `sbot pacman.mirrorlist` generates a mirrorlist refering to the local mirror
  - store syncdbs as blobs after successful import
  or
  - create syncdb files in a reduce function, manipulating a tar file
  or
  - create syncdb on demand

# IDEAS

## Reducing space requirements

Because all packages are compressed individually, we cannot take advantage of any overlap of binaty data between packages or differnt versions of packages. (First being relevant for data contained in packages for differnt architecture, latter being relevant for patches and bug fixes that only affect a few files in a big package)

One way to solve this could be to put the blob store onto a filesystem that has de-dupe and compression capabilites and then uncompress packages before storing them. We should set up an experiment to test this theory.

